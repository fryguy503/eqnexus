name: Build

on:
  push:
    branches: [ "main" ]

env:
  VERSION: 1.0.2
  BUILD_CONFIGURATION: Release
  SKIP_POST_BUILD: true

jobs:
  build:
    runs-on: windows-latest
    steps:

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1
     
    - name: vcpkg build
      uses: johnwason/vcpkg-action@v6
      id: vcpkg
      with:
        triplet: x86-windows-static
        token: ${{ github.token }}
        github-binarycache: true

    - name: Define Environment Variables
      run: echo "SKIP_POST_BUILD=true" >> $Env:GITHUB_ENV

    - name: Integrate vcpkg with MSBuild
      shell: cmd
      run: |
        vcpkg\vcpkg.exe integrate install

    - name: Build Proxy
      shell: cmd
      run: |
        msbuild proxy/NexusProxy.vcxproj /p:Configuration=Release /p:Platform=x86 /p:EnableModules=true

    - name: Build Core
      shell: cmd
      run: |
        msbuild core/core.vcxproj /p:Configuration=Release /p:Platform=x86 /p:EnableModules=true

    - name: Cache Module Files
      uses: actions/cache@v3
      with:
        path: |
          proxy/Release
          core/Release
        key: modules-${{ runner.os }}-${{ hashFiles('**/*.ixx') }}
        restore-keys: |
          modules-${{ runner.os }}-
    
    - name: Define VERSION
      run: echo "VERSION=${{ env.VERSION }}.${{ github.run_number }}" >> $Env:GITHUB_ENV

    - name: Run PowerShell script
      shell: pwsh
      run: |
        $version = $env:VERSION
        $zipFilename = "eqnexus-$version.zip"

        $dinput8Path = Join-Path -Path 'Release' -ChildPath 'dinput8.dll'
        $coreDllPath = Join-Path -Path 'Release' -ChildPath 'core.dll'
        $resourcesFolder = Join-Path -Path (Get-Location) -ChildPath 'resources'

        $versionFile = @{
            version = $version
            filename = $zipFilename
        }
        $versionJson = ConvertTo-Json -InputObject $versionFile -Depth 4
        Set-Content -Path 'version.json' -Value $versionJson -Encoding utf8

        $configPath = Join-Path -Path $resourcesFolder -ChildPath 'config.ini'
        if (Test-Path -Path $configPath) {
            $config = Get-Content -Path $configPath | ConvertFrom-Ini
        } else {
            Write-Host "config.ini does not exist. Creating a new one."
            $config = @{}
        }
        $config.Version.CoreVersion = $version
        $configContent = ConvertTo-Ini -InputObject $config
        Set-Content -Path $configPath -Value $configContent -Encoding utf8

        Write-Host "Updated config.ini with CoreVersion=$version"

        $zip = [io.compression.zipfile]::CreateFromDirectory
        $outputStream = New-Object IO.FileStream($zipFilename, [IO.FileMode]::Create)
        $archive = New-Object IO.Compression.ZipArchive($outputStream, [IO.Compression.ZipArchiveMode]::Create)

        $archive.CreateEntryFromFile($dinput8Path, 'dinput8.dll')
        $archive.CreateEntryFromFile($coreDllPath, 'eqnexus/core.dll')

        Get-ChildItem -Path $resourcesFolder -Recurse | ForEach-Object {
            if ($_.PSIsContainer) {
                $archive.CreateEntryFromDirectory($_.FullName, "eqnexus/resources/$($_.Name)")
            } else {
                $relativePath = $_.FullName.Substring($resourcesFolder.Length + 1)
                $archive.CreateEntryFromFile($_.FullName, "eqnexus/resources/$relativePath")
            }
        }

        $archive.Dispose()
        $outputStream.Dispose()

        Write-Host "Created zip file $zipFilename"

    # Create GitHub Release
    - name: Release
      uses: "marvinpinto/action-automatic-releases@latest"
      if: github.ref == 'refs/heads/main'
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "${{ env.VERSION }}"
        prerelease: false
        title: "${{ env.VERSION }}"
        files: |
          eqnexus-${{ env.VERSION }}.zip
          version.json